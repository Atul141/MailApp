package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Parcel parcel

swagger:model Parcel
*/
type Parcel struct {

	/* dealer

	Required: true
	*/
	Dealer *Dealer `json:"dealer"`

	/* owner

	Required: true
	*/
	Owner *User `json:"owner"`

	/* pickup date
	 */
	PickupDate *strfmt.DateTime `json:"pickup_date,omitempty"`

	/* recieved date

	Required: true
	*/
	RecievedDate strfmt.DateTime `json:"recieved_date"`

	/* reciever
	 */
	Reciever *User `json:"reciever,omitempty"`

	/* registration no

	Required: true
	*/
	RegistrationNo string `json:"registration_no"`

	/* status

	Required: true
	*/
	Status string `json:"status"`
}

// Validate validates this parcel
func (m *Parcel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDealer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecievedDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistrationNo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parcel) validateDealer(formats strfmt.Registry) error {

	if m.Dealer != nil {

		if err := m.Dealer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Parcel) validateOwner(formats strfmt.Registry) error {

	if m.Owner != nil {

		if err := m.Owner.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Parcel) validateRecievedDate(formats strfmt.Registry) error {

	if err := validate.Required("recieved_date", "body", strfmt.DateTime(m.RecievedDate)); err != nil {
		return err
	}

	return nil
}

func (m *Parcel) validateRegistrationNo(formats strfmt.Registry) error {

	if err := validate.RequiredString("registration_no", "body", string(m.RegistrationNo)); err != nil {
		return err
	}

	return nil
}

func (m *Parcel) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}
